package com.toyo.fish.data.wrapper.mail.persistence;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.session.RowBounds;

import com.toyo.fish.data.wrapper.mail.domain.Mail;

public interface MailMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail
     *
     * @mbggenerated
     */
    int insert(Mail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail
     *
     * @mbggenerated
     */
    int insertSelective(Mail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail
     *
     * @mbggenerated
     */
    Mail selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(Mail record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(Mail record);
    
    
    
    List<Long> selectByFilterState(@Param("state") Integer state);
    
    List<Mail> selectActiveExpressionNotInQueue(RowBounds rb);
    
    Integer sizeOfActiveExpression();
    
    int updateIdInQueueClear();
    
    
    int updateTriggerExpired();
    
    int updateTriggerActive();
    
    int updateIdInQueue(@Param("mailIdeSeq") List<Long> mailIdeSeq);
    int updateTriggerCleanedup(@Param("mailIdeSeq") List<Long> mailIdeSeq);
    
   
    int sizeOfActiveFriendRequestMail(@Param("userId") Long userId,@Param("friendId") Long friendId);
    List<Mail> selectActiveFriendRequestMail(@Param("userId") Long userId);
    
    int deleteByIdSeq(@Param("mailIdSeq") List<Long> mailIdSeq);
    
    
    
    int deleteActiveFriendMailBySender(@Param("userId") Long userId,@Param("friendIdSeq") List<Long> friendId);
    int deleteActiveFriendMailByReciever(@Param("userId") Long userId,@Param("friendIdSeq") List<Long> friendId);
   
    int deleteActiveFriendMailLogBySender(@Param("userId") Long userId,@Param("friendIdSeq") List<Long> friendId);
    int deleteActiveFriendMailLogByReciever(@Param("userId") Long userId,@Param("friendIdSeq") List<Long> friendId);
   
    
    int deleteBySenderOrRecieverId(@Param("userId") Long userId);
}