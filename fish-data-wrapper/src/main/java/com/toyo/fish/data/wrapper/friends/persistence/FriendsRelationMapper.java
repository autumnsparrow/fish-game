package com.toyo.fish.data.wrapper.friends.persistence;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.session.RowBounds;

import com.toyo.fish.data.wrapper.friends.domain.FriendsRelation;

public interface FriendsRelationMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_friends_relation
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_friends_relation
     *
     * @mbggenerated
     */
    int insert(FriendsRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_friends_relation
     *
     * @mbggenerated
     */
    int insertSelective(FriendsRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_friends_relation
     *
     * @mbggenerated
     */
    FriendsRelation selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_friends_relation
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(FriendsRelation record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_friends_relation
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(FriendsRelation record);
    
    int updateVitState();
    
    
    List<Long> getFriendsUserIds(@Param("userId") Long userId);
    List<Long> getFriendsUserIdsWithoutState(@Param("userId") Long userId);
    
    int sizeOfFriends(@Param("userId") Long userId);
    
    List<FriendsRelation> getFriendsByUserId(@Param("userId") Long userId,RowBounds rb);
    
    /**
     * delete list of friends
     * @param userId
     * @param friendsId
     * @return
     */
    int deleteFriendsId(@Param("userId")  Long userId,@Param("friendsId") List<Long> friendsId);

    int  deletedByFriends(@Param("userId")  Long userId,@Param("friendsId") List<Long> friendsId);
    
    
   // int deleteFriendsIdWithoutState(@Param("userId")  Long userId,@Param("friendsId") List<Long> friendsId);

    int  deletedByFriendsWithoutState(@Param("userId")  Long userId);
    
    int selectFriendsRelation(@Param("userId") Long userId,@Param("friendsId") Long friendsId);
    
    FriendsRelation selectFriendsRelationByFriendsId(@Param("userId") Long userId,@Param("friendsId") Long friendsId);
    
    
    
}