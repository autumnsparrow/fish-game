package com.toyo.fish.data.wrapper.mail.persistence;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.session.RowBounds;

import com.toyo.fish.data.wrapper.mail.domain.MailTriggerLog;

public interface MailTriggerLogMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail_trigger_log
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail_trigger_log
     *
     * @mbggenerated
     */
    int insert(MailTriggerLog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail_trigger_log
     *
     * @mbggenerated
     */
    int insertSelective(MailTriggerLog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail_trigger_log
     *
     * @mbggenerated
     */
    MailTriggerLog selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail_trigger_log
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(MailTriggerLog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_mail_trigger_log
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(MailTriggerLog record);
    
    
   
    
    /**
     * get MailTriggerLog by mailId
     * @param id
     * @return
     */
    MailTriggerLog selectByMailId(Long id);
    
    
    int deleteByMailIdSeq(@Param("mailIdSeq") List<Long> mailIdSeq);
    
    
    /**
     * total size of the log by category and state.
     * @param userId
     * @param category
     * @param state
     * @return
     */
    int sizeOfCategoryAndState(@Param("userId") Long userId,@Param("category") Integer category,@Param("state") Integer state);
    
    /**
     * fetch a trunk of the id
     * @param userId
     * @param category
     * @param state
     * @param rowBounds
     * @return
     */
    List<Long> idSeqOfCategoryAndStateByRange(@Param("userId") Long userId,@Param("category") Integer category,@Param("state") Integer state,RowBounds rowBounds);
    
    
    
    /**
     * get mail by id seqs
     * @param idSeqs
     * @return
     */
    List<MailTriggerLog> selectByIdSeqs(@Param("userId") Long userId,@Param("idSeqs") List<Long> idSeqs);
    
    
    /**
     * get size of mailIdAndUserId
     * @param userId
     * @param mailId
     * @return
     */
    int sizeOfUserIdAndMailId(@Param("userId") Long userId,@Param("mailId") Long mailId);
    
    
    int deleteBySenderOrRecieverId(@Param("userId") Long userId);
    
    
}