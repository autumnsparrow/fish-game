package com.toyo.fish.data.wrapper.persistence;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import com.toyo.fish.data.wrapper.domain.UserAccount;
import com.toyo.fish.data.wrapper.domain.UserAccountFriends;

public interface UserAccountMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_user_account
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_user_account
     *
     * @mbggenerated
     */
    int insert(UserAccount record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_user_account
     *
     * @mbggenerated
     */
    int insertSelective(UserAccount record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_user_account
     *
     * @mbggenerated
     */
    UserAccount selectByPrimaryKey(Long id);
    
    List<UserAccount >selectByUserIdRange(@Param("startUserId") Long startUserId,@Param("endUserId") Long endUserId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_user_account
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(UserAccount record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ty_user_account
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(UserAccount record);
    
    
    /**
     * find user account by device id and channel id
     * create the default user account for user,
     * when the user use the software.
     * @param deviceId
     * @param channelId
     * @return
     */
    UserAccount findUserAccountByDeviceIdAndChannelId(
    		@Param("deviceId") String deviceId,
    		@Param("channelId") Integer channelId
    		);
    
    /**
     * 
     * find user account by user name and password.
     *  login
     * @param userName
     * @param passsWord
     * @return
     */
    UserAccount findUserAccountByUserNameAndPassword(
    		@Param("userName") String userName,
    		@Param("passWord") String passsWord 
    		);
    
    
    
    UserAccount findUserAccountByUserName(@Param("userName") String userName);
    
    
    
    
    int updateApkVersion(@Param("apk_version") String apkVersion,@Param("id") Long id);
    
    
    int updateAvtar(@Param("id") Long id,@Param("avatar") String avatar);
    
    
    List<UserAccount> findUserAccountByUserIds(@Param("userIds") List<Long> userIds);
    
    
    int updateNickname(@Param("id") Long id,@Param("nickName") String nickName);
    
    int updateUserLevel(@Param("userId") Long userId,@Param("level") Integer level);
    
    List<UserAccountFriends> findUserAccountOnlines();
    
    
    int updateUserBasicInformation(@Param("userId") Long userId,@Param("nickName") String nickName,@Param("avatar") String avatar,@Param("level") Integer level);
    
}
